<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.7.4 on win32)" generated="20191108 14:50:37.023" rpa="false">
<suite id="s1" name="Tests" source="C:\development\test_automation\DBTesting\tests">
<suite id="s1-s1" name="DBTesting" source="C:\development\test_automation\DBTesting\tests\DBTesting.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="setup">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPassword}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
</arguments>
<msg timestamp="20191108 14:50:37.226" level="INFO">Connecting using : pymysql.connect(db=mydb, user=root, passwd=1234aaAA, host=127.0.0.1, port=3306, charset=None) </msg>
<status status="PASS" starttime="20191108 14:50:37.132" endtime="20191108 14:50:37.226"></status>
</kw>
<test id="s1-s1-t1" name="Inserting Data In Person Table">
<kw name="Execute Sql Script" library="DatabaseLibrary">
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test. Set optional input
`sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>./TestData/insertData.sql</arg>
</arguments>
<assign>
<var>${Output}</var>
</assign>
<msg timestamp="20191108 14:50:37.226" level="INFO">Executing : Execute SQL Script  |  ./TestData/insertData.sql </msg>
<msg timestamp="20191108 14:50:37.242" level="INFO">${Output} = None</msg>
<status status="PASS" starttime="20191108 14:50:37.226" endtime="20191108 14:50:37.242"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${Output}</arg>
</arguments>
<status status="PASS" starttime="20191108 14:50:37.242" endtime="20191108 14:50:37.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${Output}</arg>
<arg>None</arg>
</arguments>
<msg timestamp="20191108 14:50:37.242" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191108 14:50:37.242" endtime="20191108 14:50:37.242"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.226" endtime="20191108 14:50:37.242" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="Check A record precrd preset in person table">
<kw name="Check If Exists In Database" library="DatabaseLibrary">
<doc>Check if any row would be returned by given the input `selectStatement`. If there are no results, then this will
throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction
commit or rollback.</doc>
<arguments>
<arg>select id from mydb.person where first_name="B";</arg>
</arguments>
<msg timestamp="20191108 14:50:37.242" level="INFO">Executing : Check If Exists In Database  |  select id from mydb.person where first_name="B"; </msg>
<msg timestamp="20191108 14:50:37.242" level="INFO">Executing : Query  |  select id from mydb.person where first_name="B"; </msg>
<status status="PASS" starttime="20191108 14:50:37.242" endtime="20191108 14:50:37.257"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.242" endtime="20191108 14:50:37.257" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="Check L record not present in person table">
<kw name="Check If Not Exists In Database" library="DatabaseLibrary">
<doc>This is the negation of `check_if_exists_in_database`.</doc>
<arguments>
<arg>select id from mydb.person where first_name="L";</arg>
</arguments>
<msg timestamp="20191108 14:50:37.257" level="INFO">Executing : Check If Not Exists In Database  |  select id from mydb.person where first_name="L"; </msg>
<msg timestamp="20191108 14:50:37.257" level="INFO">Executing : Query  |  select id from mydb.person where first_name="L"; </msg>
<status status="PASS" starttime="20191108 14:50:37.257" endtime="20191108 14:50:37.257"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.257" endtime="20191108 14:50:37.257" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="Check person table exists in mydb database">
<kw name="Table Must Exist" library="DatabaseLibrary">
<doc>Check if the table given exists in the database. Set optional input `sansTran` to True to run command without an
explicit transaction commit or rollback.</doc>
<arguments>
<arg>person</arg>
</arguments>
<msg timestamp="20191108 14:50:37.257" level="INFO">Executing : Table Must Exist  |  person </msg>
<msg timestamp="20191108 14:50:37.257" level="INFO">Executing : Row Count  |  SELECT * FROM information_schema.tables WHERE table_name='person' </msg>
<status status="PASS" starttime="20191108 14:50:37.257" endtime="20191108 14:50:37.275"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.257" endtime="20191108 14:50:37.275" critical="yes"></status>
</test>
<test id="s1-s1-t5" name="Verify row count is zero">
<kw name="Row Count Is 0" library="DatabaseLibrary">
<doc>Check if any rows are returned from the submitted `selectStatement`. If there are, then this will throw an
AssertionError. Set optional input `sansTran` to True to run command without an explicit transaction commit or
rollback.</doc>
<arguments>
<arg>select * from mydb.person where first_name = 'xyz';</arg>
</arguments>
<msg timestamp="20191108 14:50:37.279" level="INFO">Executing : Row Count Is 0  |  select * from mydb.person where first_name = 'xyz'; </msg>
<msg timestamp="20191108 14:50:37.279" level="INFO">Executing : Row Count  |  select * from mydb.person where first_name = 'xyz'; </msg>
<status status="PASS" starttime="20191108 14:50:37.279" endtime="20191108 14:50:37.279"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.279" endtime="20191108 14:50:37.283" critical="yes"></status>
</test>
<test id="s1-s1-t6" name="Verify row count is equal to some value">
<kw name="Row Count Is Equal To X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is equal to the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select * from mydb.person where first_name = 'A';</arg>
<arg>1</arg>
</arguments>
<msg timestamp="20191108 14:50:37.291" level="INFO">Executing : Row Count Is Equal To X  |  select * from mydb.person where first_name = 'A';  |  1 </msg>
<msg timestamp="20191108 14:50:37.291" level="INFO">Executing : Row Count  |  select * from mydb.person where first_name = 'A'; </msg>
<status status="PASS" starttime="20191108 14:50:37.291" endtime="20191108 14:50:37.291"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.287" endtime="20191108 14:50:37.291" critical="yes"></status>
</test>
<test id="s1-s1-t7" name="Verify row count is greater than some value">
<kw name="Row Count Is Greater Than X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is greater than the value submitted. If not, then
this will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select * from mydb.person where first_name = 'A';</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20191108 14:50:37.295" level="INFO">Executing : Row Count Is Greater Than X  |  select * from mydb.person where first_name = 'A';  |  0 </msg>
<msg timestamp="20191108 14:50:37.299" level="INFO">Executing : Row Count  |  select * from mydb.person where first_name = 'A'; </msg>
<status status="PASS" starttime="20191108 14:50:37.295" endtime="20191108 14:50:37.299"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.295" endtime="20191108 14:50:37.299" critical="yes"></status>
</test>
<test id="s1-s1-t8" name="Verify row count is less than some value">
<kw name="Row Count Is Less Than X" library="DatabaseLibrary">
<doc>Check if the number of rows returned from `selectStatement` is less than the value submitted. If not, then this
will throw an AssertionError. Set optional input `sansTran` to True to run command without an explicit
transaction commit or rollback.</doc>
<arguments>
<arg>select * from mydb.person where first_name = 'david';</arg>
<arg>2</arg>
</arguments>
<msg timestamp="20191108 14:50:37.303" level="INFO">Executing : Row Count Is Less Than X  |  select * from mydb.person where first_name = 'david';  |  2 </msg>
<msg timestamp="20191108 14:50:37.303" level="INFO">Executing : Row Count  |  select * from mydb.person where first_name = 'david'; </msg>
<status status="PASS" starttime="20191108 14:50:37.303" endtime="20191108 14:50:37.307"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.303" endtime="20191108 14:50:37.307" critical="yes"></status>
</test>
<test id="s1-s1-t9" name="Update record in person table">
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>Update mydb.person set first_name="W" where id=5;</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20191108 14:50:37.311" level="INFO">Executing : Execute SQL String  |  Update mydb.person set first_name="W" where id=5; </msg>
<msg timestamp="20191108 14:50:37.319" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20191108 14:50:37.311" endtime="20191108 14:50:37.319"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<status status="PASS" starttime="20191108 14:50:37.319" endtime="20191108 14:50:37.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>None</arg>
</arguments>
<msg timestamp="20191108 14:50:37.323" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191108 14:50:37.323" endtime="20191108 14:50:37.323"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.307" endtime="20191108 14:50:37.323" critical="yes"></status>
</test>
<test id="s1-s1-t10" name="Retrieve Records from person table">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>select * from mydb.person</arg>
</arguments>
<assign>
<var>@{queryResults}</var>
</assign>
<msg timestamp="20191108 14:50:37.327" level="INFO">Executing : Query  |  select * from mydb.person </msg>
<msg timestamp="20191108 14:50:37.327" level="INFO">@{queryResults} = [ (1, 'A', 'Tran') | (2, 'B', 'Nguyen') | (3, 'C', 'Le') | (4, 'D', 'Tran') | (5, 'W', 'Bui') | (6, 'F', 'Le') ]</msg>
<status status="PASS" starttime="20191108 14:50:37.327" endtime="20191108 14:50:37.327"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>many @{queryResults}</arg>
</arguments>
<status status="PASS" starttime="20191108 14:50:37.331" endtime="20191108 14:50:37.331"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.327" endtime="20191108 14:50:37.331" critical="yes"></status>
</test>
<test id="s1-s1-t11" name="Delete Records from person table">
<kw name="Execute Sql String" library="DatabaseLibrary">
<doc>Executes the sqlString as SQL commands. Useful to pass arguments to your sql. Set optional input `sansTran` to
True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>Delete from mydb.person;</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20191108 14:50:37.335" level="INFO">Executing : Execute SQL String  |  Delete from mydb.person; </msg>
<msg timestamp="20191108 14:50:37.343" level="INFO">${output} = None</msg>
<status status="PASS" starttime="20191108 14:50:37.335" endtime="20191108 14:50:37.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${output}</arg>
<arg>None</arg>
</arguments>
<msg timestamp="20191108 14:50:37.347" level="INFO">Argument types are:
&lt;class 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20191108 14:50:37.347" endtime="20191108 14:50:37.347"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.335" endtime="20191108 14:50:37.347" critical="yes"></status>
</test>
<kw name="Disconnect From Database" library="DatabaseLibrary" type="teardown">
<doc>Disconnects from the database.</doc>
<msg timestamp="20191108 14:50:37.351" level="INFO">Executing : Disconnect From Database</msg>
<status status="PASS" starttime="20191108 14:50:37.351" endtime="20191108 14:50:37.351"></status>
</kw>
<status status="PASS" starttime="20191108 14:50:37.086" endtime="20191108 14:50:37.351"></status>
</suite>
<status status="PASS" starttime="20191108 14:50:37.023" endtime="20191108 14:50:37.355"></status>
</suite>
<statistics>
<total>
<stat pass="11" fail="0">Critical Tests</stat>
<stat pass="11" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="11" fail="0" id="s1" name="Tests">Tests</stat>
<stat pass="11" fail="0" id="s1-s1" name="DBTesting">Tests.DBTesting</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
